kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "eric-data-document-database-pg.fullname" . }}-rollback
  labels:
    app: {{ template "eric-data-document-database-pg.name" . }}
    chart: {{ template "eric-data-document-database-pg.chart" . }}
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  preRollback.sh: |-
    #!/bin/bash

    query_role() {
        local psql=( psql -v "ON_ERROR_STOP=1" )
        psql --username postgres <<-EOSQL
            SELECT rolname FROM pg_roles where rolname='$1';
    	EOSQL
    }

    check_role() {
      query_result=$(query_role "$1")
      result=$(echo "$query_result" | grep 'row)')

      echo "$0: user $1 : $result"

      if [ "$result" = "(1 row)" ]; then
          return 0
      else
          return 1
      fi
    }

    revoke_pm_counter_role() {
      if check_role exporter; then
        local psql=( psql -v "ON_ERROR_STOP=1" )
        psql --username=postgres <<-EOSQL
            DROP VIEW exporter.pg_stat_replication;
            DROP VIEW exporter.pg_stat_activity;
            DROP SCHEMA exporter;
            DROP ROLE exporter;
    	EOSQL
      else
        echo "Role exporter doesn't exists"
      fi
    }

    revoke_readiness_role() {
      if check_role readaccess; then
        local psql=( psql -v "ON_ERROR_STOP=1" )
        psql --username=postgres <<-EOSQL
            ALTER DEFAULT PRIVILEGES IN SCHEMA public REVOKE SELECT ON TABLES FROM readaccess;
            REVOKE SELECT ON ALL TABLES IN SCHEMA public FROM readaccess;
            REVOKE USAGE ON SCHEMA public FROM readaccess;
            DROP ROLE readaccess;
    	EOSQL
      else
        echo "Role readiness doesn't exists"
      fi
    }

    revoke_replica_role() {
      if check_role $PG_REPLICA_USER; then
        local psql=( psql -v "ON_ERROR_STOP=1" )
        psql --username=postgres <<-EOSQL
            DROP ROLE $PG_REPLICA_USER;
    	EOSQL
      else
        echo "Role $PG_REPLICA_USER doesn't exists"
      fi
    }

    revoke_hba_conf() {
      hba_conf=$PGDATA/pg_hba.conf
      sed -i "s/^local\\s*all\\s*all\\s*md5/local    all    all        trust/" "$hba_conf"
      sed -i "s/^host\\s*all\\s*all\\s*127.0.0.1\/32\\s*md5/host    all    all   127.0.0.1\/32    trust/" "$hba_conf"
      sed -i "s/^host\\s*all\\s*all\\s*::1\/128\\s*md5/host    all    all   ::1\/128    trust/" "$hba_conf"
      sed -i "/^host\\s*replication.*md5/d" "$hba_conf"
      sed -i "/^local\\s*replication.*md5/d" "$hba_conf"

      echo "local   replication     all                                     trust" >> "$hba_conf"
      echo "host    replication     all             127.0.0.1/32            trust" >> "$hba_conf"
      echo "host    replication     all             ::1/128                 trust" >> "$hba_conf"

      su - postgres -c "cd /usr/pgsql-10/bin && ./pg_ctl -D $PGDATA reload"
    }

    if [ -d /usr/local/bin/data_backup.sh ]; then
        rm /usr/local/bin/data_backup.sh
    fi

    if [ -d /usr/local/bin/pg_hba.template.conf ]; then
        rm /usr/local/bin/pg_hba.template.conf
    fi

    revoke_hba_conf

    revoke_pm_counter_role

    revoke_readiness_role

    revoke_replica_role
